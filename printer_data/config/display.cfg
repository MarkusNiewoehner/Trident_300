########################################
# EXP1 / EXP2 (display) pins
########################################
[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>
#####################################################################
#   Displays
#####################################################################
[display]
#  mini12864 LCD Display
menu_timeout: 120
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
#back_pin:
contrast: 63
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2

[neopixel btt_mini12864]
#  To control Neopixel RGB in mini12864 display
pin: EXP1_6
chain_count: 3
initial_RED: 1
initial_GREEN: 0.5
initial_BLUE: 0
color_order: RGB

#  Set RGB values on boot up for each Neopixel. 
#  Index 3 = display, Index 2 and 1 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
        SET_LED LED=btt_mini12864 RED=1 GREEN=0.5 BLUE=0 INDEX=1 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=1 GREEN=0.5 BLUE=0 INDEX=2 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=1 GREEN=0.5 BLUE=0 INDEX=3

# https://github.com/Klipper3d/klipper/blob/master/klippy/extras/display/menu.cfg

[menu __main __setup __calib __Z_ENDSTOP_CALIBRATE]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Z_ENDSTOP_CALIBRATE

[menu __main __setup __calib __Z_ENDSTOP_CALIBRATE __start]
type: command
name: start
gcode:
  CG28
  Z_ENDSTOP_CALIBRATE

[menu __main __filament __resume]
type: command
enable: {('virtual_sdcard' in printer) and printer.print_stats.state == "paused"}
name: Resume printing
gcode:
    {% if "pause_resume" in printer %}
        RESUME
    {% else %}
        M24
    {% endif %}

[menu __main __filament __pause]
type: command
enable: {('virtual_sdcard' in printer) and printer.print_stats.state == "printing"}
name: Pause printing
gcode:
    {% if "pause_resume" in printer %}
        PAUSE
    {% else %}
        M25
    {% endif %}

[menu __main __filament __flush]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: FLUSH_NOZZLE
gcode: FLUSH_NOZZLE

[menu __main __filament __rolle]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Rolle_wechseln
gcode: Rolle_wechseln

[menu __main __filament __CHANGE_NOZZLE]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: CHANGE_NOZZLE
gcode: CHANGE_NOZZLE

[menu __main __filament __CLEAN_NOZZLE]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: CLEAN_NOZZLE
gcode: CLEAN_NOZZLE

[menu __main __filament __Parkposition]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Parkposition
gcode: Parkposition

[menu __main __filament __Druckkopf_nach_vorn]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Druckkopf_nach_vorn
gcode: Druckkopf_nach_vorn
  
[menu __main __temp __hotend0_target]
type: input
enable: {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 5
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __main __control __Blower_off]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Luefter aus
gcode: luefter_Aus
index: 1

[menu __main __control __disable]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Steppers off
gcode:
    M84
    M18

[menu __main __control __caselightonoff]
type: input
enable: {'output_pin Licht' in printer}
name: Lights: {'ON ' if menu.input else 'OFF'}
input: {printer['output_pin Licht'].value}
input_min: 0
input_max: 0.5
input_step: 0.5
gcode:
    SET_PIN PIN=Licht VALUE={0.5 if menu.input else 0}

[menu __main __control __caselightpwm]
type: input
enable: {'output_pin Licht' in printer}
name: Lights: {'%3d' % (menu.input*100)}%
input: {printer['output_pin Licht'].value}
input_min: 0.0
input_max: 1.0
input_step: 0.05
realtime: True
gcode:
    SET_PIN PIN=Licht VALUE={menu.input}

[menu __main __control __Parkposition]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Parkposition
gcode: Parkposition

[menu __main __control __mitte]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Druckkopf_mittig
gcode: Druckkopf_mittig

[menu __main __control __Druckkopf_nach_vorn]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Druckkopf_nach_vorn
gcode: Druckkopf_nach_vorn


[menu __main __control __CALIBRATE_Z]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: CALIBRATE_Z
gcode: CALIBRATE_Z

[menu __main __control __CLEAN_NOZZLE]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: CLEAN_NOZZLE
gcode: CLEAN_NOZZLE

[menu __main __control __filter]
type: list
name: Filter
index: 0

[menu __main __control __filter __abluft_aus]
type: command
name: Abluft aus
gcode: Abluft_aus

[menu __main __control __filter __Abluft_halb]
type: command
name: Abluft halb
gcode: Abluft_halb

[menu __main __control __filter __abluft_voll]
type: command
name: Abluft voll
gcode: Abluft_voll

[menu __main __control __filter __umluft_aus]
type: command
name: Umluft aus
gcode: umluft_aus

[menu __main __control __filter __umluft_halb]
type: command
name: Umluft halb
gcode: umluft_halb

[menu __main __control __filter __umluft_voll]
type: command
name: Umluft voll
gcode: umluft_voll

########################################################################
[menu __main __tune]
type: list
#enable: {printer.idle_timeout.state == "Printing"}
name: Tune

[menu __main __tune __speed]
type: input
name: Speed: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.speed_factor}
input_min: 0.01
input_max: 5
input_step: 0.01
realtime: True
gcode:
    M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type: input
name: Flow: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.extrude_factor}
input_min: 0.01
input_max: 2
input_step: 0.01
realtime: True
gcode:
    M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type: input
name: Offset Z:{'%05.3f' % menu.input}
input: {printer.gcode_move.homing_origin.z}
input_min: -5
input_max: 5
input_step: 0.01
realtime: True
index: 0
gcode:
    SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __tune __Pressure_Advance]
type: input
name: PA:{'%.3f' % menu.input}
#index: 
input: {printer.extruder.pressure_advance}
input_min: 0
input_max: 1
input_step: 0.001
realtime: True
gcode:
    SET_PRESSURE_ADVANCE ADVANCE={'%f' % menu.input}

[menu __main __tune __Pressure_Advance_Smooth_Time]
type: input
name: PA_Smooth:{'%.2f' % menu.input}
input: {printer.extruder.smooth_time}
input_min: 0
input_max: 0.1
input_step: 0.01
realtime: True
gcode:
    SET_PRESSURE_ADVANCE SMOOTH_TIME={'%f' % menu.input}

########################################################################
#Bed Leveling Menu Item
[menu __main __bed_leveling]
type: disabled

[menu __main __octoprint]
type: disabled

[menu __main __setup __calib __delta_calib_auto]
type: disabled

[menu __main __setup __calib __delta_calib_man __start]
type: disabled

[menu __main __filament __hotend0_target]
type: input
enable: {'extruder' in printer}
name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 10
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __main __Printer_Limits]
type: list
name: Printer Limits
enable: {printer.idle_timeout.state != "Printing" or printer.idle_timeout.state == "Printing"}
#################################################################
#    Maximum velocity (in mm/s) of the toolhead (relative to the print)
[menu __main __Printer_Limits __Max_Velocity]
type: input
name: Max_Veloc:{'%.d' % menu.input}
input: {printer.toolhead.max_velocity}
input_min: 100
input_max: 1000
input_step: 50
realtime: True
gcode:
    SET_VELOCITY_LIMIT VELOCITY={'%d' % menu.input}
#################################################################
#    Maximum acceleration (in mm/s^2) of the toolhead (relative to the print)
[menu __main __Printer_Limits __Max_Accel]
type: input
name: Max_Accel:{'%.d' % menu.input}
input: {printer.toolhead.max_accel}
input_min: 100
input_max: 30000
input_step: 500
realtime: True
gcode:
    SET_VELOCITY_LIMIT ACCEL={'%d' % menu.input}
#################################################################
#   A pseudo acceleration (in mm/s^2) controlling how fast the
#   toolhead may go from acceleration to deceleration. It is used to
#   reduce the top speed of short zig-zag moves (and thus reduce
#   printer vibration from these moves). The default is half of
#   max_accel.
[menu __main __Printer_Limits __Max_Accel_To_Decel]
type: input
name: Ac_To_Dec:{'%.d' % menu.input}
input: {printer.toolhead.max_accel_to_decel}
input_min: 1
input_max: 20000
input_step: 500
realtime: True
gcode:
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={'%d' % menu.input}
#################################################################
#   The maximum velocity (in mm/s) that the toolhead may travel a 90
#   degree corner at. A non-zero value can reduce changes in extruder
#   flow rates by enabling instantaneous velocity changes of the
#   toolhead during cornering.
[menu __main __Printer_Limits __Square_Corner_Velocity]
type: input
name: Sq_Co_Vel:{'%.d' % menu.input}
input: {printer.toolhead.square_corner_velocity}
input_min: 0
input_max: 100
input_step: 1
realtime: True
gcode:
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={'%d' % menu.input}
#################################################################
[menu __main __Printer_Limits __Exit]
type: command
name: Exit
gcode:
    { menu.exit() }  

[menu __main __setup __dump]
type: disabled

[menu __main __sdcard]
type: vsdlist
enable: {('virtual_sdcard' in printer)}
name: Print...
index: 3
